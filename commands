#!/bin/bash
set -e;

# Check if name is specified
if [[ $1 == redis:* ]]; then
    if [[ -z $2 ]]; then
        echo "You must specify an app name"
        exit 1
    else
        APP="$2"
        # Check if app exists with the same name
        if [[ -d "$DOKKU_ROOT/$APP" ]]; then
            APP_EXISTS=true
        else
            APP_EXISTS=false
        fi
    fi
fi

case "$1" in

  redis:start)
    REDIS_CONTAINER_NAME="redis-$APP"

    echo "-----> Starting Redis for $APP..."

    # Check if Redis container is installed
    IMAGE=$(docker images | grep "sekjun9878/redis " |  awk '{print $3}')
    if [[ -z $IMAGE ]]; then
        echo "-----> Redis image not found... Did you run 'dokku plugins-install'?"
        exit 1
    fi

    # Check if Redis is already running
    ID=$(docker ps | grep "$REDIS_CONTAINER_NAME" |  awk '{print $1}')
    if [[ ! -z "$ID" ]]; then
        echo "-----> Redis container already running: $REDIS_CONTAINER_NAME"
        exit 0
    fi

    # Remove old stopped container with the same name, if it exists
    ID=$(docker ps -a | grep "$REDIS_CONTAINER_NAME" |  awk '{print $1}')
    if [[ ! -z $ID ]]; then
        ID=$(docker rm $ID)
        echo "-----> Removed stale Redis container $ID"
    fi

    # Check if an existing DB volume exists
    HOST_DIR="$DOKKU_ROOT/.redis/volume-$APP"
    if [[ -d $HOST_DIR ]]; then
        echo "-----> Reusing volume-$APP volume"
    else
        echo "-----> Creating new volume"
        mkdir -p $HOST_DIR
        echo "       Volume volume-$APP created"
    fi
    VOLUME="$HOST_DIR:/var/lib/redis"

    # Launch container
    ID=$(docker run -v $VOLUME --name $REDIS_CONTAINER_NAME -d $REDIS_IMAGE /bin/start_redis.sh)
    sleep 4
    echo "-----> Redis container started: $REDIS_CONTAINER_NAME"

    # Link to a potential existing app
    dokku link:create $APP $REDIS_CONTAINER_NAME redis
    echo "-----> Redis container linked: $APP -> $REDIS_CONTAINER_NAME"
    sleep 1

    echo "=====> Redis started:"
    echo "       $REDIS_CONTAINER_NAME"

    # If being called manually (e.g. not from a build hook)
    if [ $3 -ne 1]; then
        echo "       Please rebuild the app for the linking to apply"
    fi

    sleep 1
    ;;

  redis:destroy)
    REDIS_CONTAINER_NAME="redis-$APP"

    echo " !    WARNING: Potentially Destructive Action"
    echo " !    This command will destroy the Redis instance for"
    echo " !    $APP (including all volumes and data)."
    echo " !    To proceed, type \"$APP\""

    # Stop the container
    ID=$(docker ps | grep "$REDIS_CONTAINER_NAME" |  awk '{print $1}')
    if [[ ! -z $ID ]]; then
        docker stop $ID
    fi

    # Remove the container
    ID=$(docker ps -a | grep "$REDIS_CONTAINER_NAME" |  awk '{print $1}')
    if [[ ! -z $ID ]]; then
        docker rm $ID
    fi

    # Remove persistent volume
    HOST_DIR="$DOKKU_ROOT/.redis/volume-$APP"
    if [[ -d $HOST_DIR ]]; then
        rm -rf $HOST_DIR
    fi

    dokku link:delete $APP $REDIS_CONTAINER_NAME redis

    echo
    echo "-----> Redis container destroyed: $REDIS_IMAGE"
    ;;

  redis:logs)
    REDIS_CONTAINER_NAME="redis-$APP"
    docker logs $REDIS_CONTAINER_NAME | tail -n 100
    ;;

  help)
    cat && cat<<EOF
    redis:start <app>                               Start a Redis container for an app
    redis:stop <app>                                Stop a Redis container of an app
    redis:destroy <app>                             Destroy Redis volume of an app
    redis:logs <app>                                Display last logs from Redis for an app
EOF
    ;;

  *)
    exit $DOKKU_NOT_IMPLEMENTED_EXIT
    ;;

esac
